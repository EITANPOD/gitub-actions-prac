name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        # What this does: This pulls the repository's code into the runner
        # so subsequent steps can work with the files.

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # What this does: Enables Docker's Buildx, which supports building
        # multi-platform images and advanced caching options.

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # What this does: Logs into DockerHub using credentials stored securely
        # as repository secrets. These must be set in GitHub's settings.

      # Step 4: Build and push Docker image
      - name: Build and push backend images
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: /home/eitanpod/development/log-on-bootcamp-main/gitub-actions-prac/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/appbackend:0.1

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: /home/eitanpod/development/log-on-bootcamp-main/gitub-actions-prac/feontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/appfrontend:0.1
        # What this does:
        # - `context: .` tells Docker to use the current directory.
        # - `push: true` uploads the image to DockerHub.
        # - `tags:` defines the image name and version. Adjust as needed.

      # Step 5: Deploy (Optional placeholder)
      # This is a placeholder for deployment logic if needed later.